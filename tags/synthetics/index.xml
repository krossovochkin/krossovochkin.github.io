<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>synthetics on Krossovochkin</title>
    <link>https://krossovochkin.github.io/tags/synthetics/</link>
    <description>Recent content in synthetics on Krossovochkin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2020 Vasya Drobushkov</copyright>
    <lastBuildDate>Thu, 19 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://krossovochkin.github.io/tags/synthetics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Compiler-generated classes, methods and fields in Java</title>
      <link>https://krossovochkin.github.io/posts/2020_03_19_compiler_generated_classes_methods_and_fields_in_java/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/2020_03_19_compiler_generated_classes_methods_and_fields_in_java/</guid>
      <description>Source

Introduction When we write program in Java we create some classes, methods, fields and put all of this into our source code — .java files. After these files are compiled with javac (Java Compiler) into .class files we got a bunch of Java bytecode. It turns out that not only we create classes, methods and fields in our source code, but also compiler by itself can create them when needed.</description>
    </item>
    
    <item>
      <title>Kotlin-android-synthetics performance analysis (with ButterKnife)</title>
      <link>https://krossovochkin.github.io/posts/2019_02_18_kotlin_android_synthetics_performance_analysis_with_butterknife/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/2019_02_18_kotlin_android_synthetics_performance_analysis_with_butterknife/</guid>
      <description>Introduction After comment that synthetic is no longer recommended practice and some arguments I decided to go deeper into issue with performance of kotlin-android-synthetics by analyzing generated Java and byte code and comparing to other approaches (such as vanilla-*findViewById *and ButterKnife).
Vanilla-findViewById This is sample Activity we’ll work with throughout the article. Approach with *findViewById *will be our baseline.
Sample consists of:
  *Activity *class
  One *TextView *property inside *Activity *with *lateinit *modifier</description>
    </item>
    
  </channel>
</rss>