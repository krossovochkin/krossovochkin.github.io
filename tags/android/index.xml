<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Vasya Drobushkov</title>
    <link>https://krossovochkin.com/tags/android/</link>
    <description>Recent content in Android on Vasya Drobushkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Jul 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://krossovochkin.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>When Compose remember cannot forget</title>
      <link>https://krossovochkin.com/posts/2022_07_23_when_compose_remember_cannot_forget/</link>
      <pubDate>Sat, 23 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2022_07_23_when_compose_remember_cannot_forget/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../by/2022_07_23_when_compose_remember_cannot_forget&#34;&gt;Чытаць на беларускай мове&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://androidweekly.net/issues/issue-529&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/androidweekly-529-blue#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;When developing &lt;a href=&#34;https://krossovochkin.com/apps/color-utils/&#34;&gt;color-utils&lt;/a&gt; app using Compose for Web I faced an issue that &lt;code&gt;remember&lt;/code&gt; didn&amp;rsquo;t want to forget the state. It was quite annoying experience as it felt stupid: composable function is recomposed with the new value provided but &lt;code&gt;remember&lt;/code&gt; still kept old value.&lt;br&gt;&#xA;As usual, there is no magic there and the answer is quite simple therefore this article won&amp;rsquo;t be that long.&lt;/p&gt;&#xA;&lt;p&gt;Compose is all about state. In the app I had two levels of state:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Калі Compose remember ня можа забыць</title>
      <link>https://krossovochkin.com/posts/by/2022_07_23_when_compose_remember_cannot_forget/</link>
      <pubDate>Sat, 23 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/by/2022_07_23_when_compose_remember_cannot_forget/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../../2022_07_23_when_compose_remember_cannot_forget&#34;&gt;Read in English&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://androidweekly.net/issues/issue-529&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/androidweekly-529-blue#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;уводзіны&#34;&gt;Уводзіны&lt;/h2&gt;&#xA;&lt;p&gt;Пры распрацоўцы прыкладання &lt;a href=&#34;https://krossovochkin.com/apps/color-utils/&#34;&gt;color-utils&lt;/a&gt; з выкарыстаннем Compose для Web я сутыкнуўся з праблемай, што &lt;code&gt;remember&lt;/code&gt; не хацеў забываць стан. Гэта быў вельмі раздражняльны вопыт, бо я адчуваў сябе па-дурному: Composable функцыя перакампанавана з новым значэннем, але &lt;code&gt;remember&lt;/code&gt; па-ранейшаму захоўвала старое значэнне.&#xA;Як звычайна, ніякай магіі тут няма, і адказ даволі просты, таму гэты артыкул не будзе вельмі доўгі.&lt;/p&gt;&#xA;&lt;p&gt;Compose - гэта ўсё аб стане. У прыкладанні ў мяне было два ўзроўні стану:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Controlling TextView MinWidth</title>
      <link>https://krossovochkin.com/posts/2021_09_14_controlling_textview_minwidth/</link>
      <pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2021_09_14_controlling_textview_minwidth/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://androidweekly.net/issues/issue-484&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/androidweekly-484-blue#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;Sometimes we might need our TextView with &lt;code&gt;wrap_content&lt;/code&gt; width to occupy more space than it will based on amount of characters it displays. For that we can set minimum width. Usually, we do that via XML like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;na&#34;&gt;xmlns:app=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;na&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;na&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;na&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;na&#34;&gt;tools:context=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;.MainActivity&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;TextView&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;na&#34;&gt;android:id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;@+id/textView&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;na&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;na&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;na&#34;&gt;android:background=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;@drawable/bg_text&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;na&#34;&gt;android:gravity=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;na&#34;&gt;android:minWidth=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;200dp&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;na&#34;&gt;android:text=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;na&#34;&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;na&#34;&gt;app:layout_constraintLeft_toLeftOf=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;na&#34;&gt;app:layout_constraintRight_toRightOf=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;na&#34;&gt;app:layout_constraintTop_toTopOf=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Having setup like this we ensure that our TextView will occupy a minimum of 200dp.&lt;br&gt;&#xA;Also, we can control minimum width programmatically via: &lt;code&gt;TextView#setMinWidth&lt;/code&gt;.&lt;br&gt;&#xA;But controlling minimum width programmatically has one caveat that I&amp;rsquo;d like to describe below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debugging Proguard configuration issues</title>
      <link>https://krossovochkin.com/posts/2021_01_18_debugging_proguard_configuration_issues/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2021_01_18_debugging_proguard_configuration_issues/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1590249002987-c3d0e38db7a4?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;q=80&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://androidweekly.net/issues/issue-450&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/androidweekly-450-blue#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;It might happen so that there is a bug in your release build while in debug everything works fine. In many cases, it might be an issue with Proguard/R8 configuration. Of course, it is better to test your code thoroughly, properly configure Proguard if you, let&amp;rsquo;s say, load some classes only via reflection and so on. But reality sometimes strikes and bugs might go to production.&lt;br&gt;&#xA;In this case, the first thing that is needed is to find a bug and fix it. And only then have some retrospective to mitigate such situations in the future.&#xA;When the bug is in production already every minute counts, therefore it is important to have some plan. Proguard configuration seems complex to someone who didn&amp;rsquo;t work with it, so I recommend to take a look at its main features.&lt;br&gt;&#xA;Most of the time I&amp;rsquo;d say that issue is easy can be found and fixed by analyzing crash report logs. But sometimes the log is not that clear.&lt;br&gt;&#xA;In this article I&amp;rsquo;d like to introduce the plan to find what part of &amp;ldquo;Proguard&amp;rdquo; causing an issue, so you can debug more effectively.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android Room Hidden Costs</title>
      <link>https://krossovochkin.com/posts/2020_12_18_android_room_hidden_costs/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2020_12_18_android_room_hidden_costs/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://androidweekly.net/issues/issue-445&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/androidweekly-445-blue#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mailchi.mp/kotlinweekly/kotlin-weekly-230&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kotlinweekly-230-purple#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;Android Room is an awesome AndroidX library. It is great because it provides a clean way of how to deal with databases without introducing some heavy concepts. Out of the box with Room one gets:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;simplified code comparing with raw SQLite queries&lt;/li&gt;&#xA;&lt;li&gt;working via DAO interfaces and models instead of Cursors&lt;/li&gt;&#xA;&lt;li&gt;auto-generated &amp;ldquo;boilerplate&amp;rdquo; code for queries&lt;/li&gt;&#xA;&lt;li&gt;migration support&lt;/li&gt;&#xA;&lt;li&gt;Android Studio tooling (compile-time verification of queries and highlight)&lt;/li&gt;&#xA;&lt;li&gt;support for reactive streams (RxJava, Kotlin Flow)&lt;/li&gt;&#xA;&lt;li&gt;and more&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In this article, I&amp;rsquo;d like to discover some hidden costs Room applies to support reactive streams and how one can try to avoid them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Accessibility of text over generic background color</title>
      <link>https://krossovochkin.com/posts/2020_03_29_accessibility_of_text_over_generic_background_color/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2020_03_29_accessibility_of_text_over_generic_background_color/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1465403843003-b277b46a1120?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1357&amp;amp;q=80&#34; alt=&#34;Source&#34;&gt;&lt;em&gt;&lt;a href=&#34;https://unsplash.com/photos/Jky9coxzeHI&#34;&gt;Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://proandroiddev.com/accessibility-of-text-over-generic-background-color-e82e9546731a&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/original-proandroiddev-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://proandroiddev.com/proandroiddev-digest-18-4c6a096fc7e8&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/proandroiddevdigest-18-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;One of the important parts of application development is to make it accessible to as many users as possible. This includes people with impaired vision, color blindness, impaired hearing, impaired dexterity, cognitive disabilities, and many other disabilities.&#xA;Making an app accessible is challenging but rewarding. The difficulty is because the development team should pay attention to some details which often might be overlooked. Though besides some advanced accessibility support might be too expensive to add, there are still some basic best practices to ensure that your app development is heading in the right direction (and can be improved later over time).&#xA;Basic accessibility support includes providing content descriptions, large enough touchable areas and ensuring good color contrast between foreground and background components.&#xA;In this article, we’ll go in detail on the latest — color contrast. We’ll take a look at one specific situation I faced while developing &lt;a href=&#34;https://github.com/krossovochkin/FiberyUnofficial&#34;&gt;FiberyUnofficial&lt;/a&gt; — my pet project, Android companion app for &lt;a href=&#34;https://fibery.io&#34;&gt;https://fibery.io&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vinyls animation with MotionLayout</title>
      <link>https://krossovochkin.com/posts/2020_02_21_vinyls_animation_with_motionlayout/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2020_02_21_vinyls_animation_with_motionlayout/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1539375665275-f9de415ef9ac?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1357&amp;amp;q=80&#34; alt=&#34;Source&#34;&gt;&lt;em&gt;&lt;a href=&#34;https://unsplash.com/photos/Jm9P0mDPo6A&#34;&gt;Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/@krossovochkin/vinyls-animation-with-motionlayout-595e716c2752&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/original-medium-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Being professional Android developer for many years, things which were always difficult to me are animations, colors and dimensions — basically all the UI/UX stuff. I can’t describe or easily understand what good colors can be used, how to implement this or that animation and so on.&#xA;Though we’re waiting for MotionLayout for quite long time (and Android Studio 4.0) I took some time to play with it. And I should say that experience (even without Motion Editor) was much better than I expected.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Diving deep into Android Dex bytecode</title>
      <link>https://krossovochkin.com/posts/2020_02_02_diving_deep_into_android_dex_bytecode/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2020_02_02_diving_deep_into_android_dex_bytecode/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1501721709601-744e5bf3440d?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1357&amp;amp;q=80&#34; alt=&#34;Source&#34;&gt;&lt;em&gt;&lt;a href=&#34;https://unsplash.com/photos/5MvL55-rSvI&#34;&gt;Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://proandroiddev.com/diving-deep-into-android-dex-bytecode-48db82b170c8&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/original-proandroiddev-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://proandroiddev.com/proandroiddev-digest-15-b467005869ce&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/proandroiddevdigest-15-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Modern Android development is based on Kotlin, which is interoperable with Java. Whenever we use some cool feature from Kotlin (say High-order functions) under the hood (when running on JVM) the feature is implemented in terms of Java bytecode. This might lead to some overheads in memory and performance if used without caution (for example excessive usage of lambdas with parameters without inlining might produce a lot of anonymous classes and put additional pressure on GC).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Change Theme Dynamically with Circular Reveal Animation on Android</title>
      <link>https://krossovochkin.com/posts/2020_01_19_change_theme_dynamically_with_circular_reveal_animation_on_android/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2020_01_19_change_theme_dynamically_with_circular_reveal_animation_on_android/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://proandroiddev.com/change-theme-dynamically-with-circular-reveal-animation-on-android-8cd574f5f0d8&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/original-proandroiddev-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://proandroiddev.com/proandroiddev-digest-14-b7247f25292f&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/proandroiddevdigest-14-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Dark theme on Android is on a hype at the moment. More and more apps add support for Dark theme over time allowing users to customize their phones, save battery and provide better accessibility. Though another trend which grows today is animated theme changes. First app I saw support of this was Telegram:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../img/1_JKZ-OapISQlTMhX8Y-VmcA.gif&#34; alt=&#34;Source&#34;&gt;&lt;em&gt;&lt;a href=&#34;https://telegram.org/blog#switch-to-night-mode-faster&#34;&gt;Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;After that in different modifications such feature started to appear in other apps, for example VK.&#xA;The effect is amazing. And in this article we’ll go into how to implement such functionality in your app.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLite Triggers (&#43; Android Room)</title>
      <link>https://krossovochkin.com/posts/2020_01_17_sqlite_triggers_android_room/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2020_01_17_sqlite_triggers_android_room/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://proandroiddev.com/sqlite-triggers-android-room-2e7120bb3e3a&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/original-proandroiddev-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://androidweekly.net/issues/issue-397&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/androidweekly-397-blue#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;SQLite is one of the &lt;a href=&#34;https://www.sqlite.org/mostdeployed.html&#34;&gt;most used&lt;/a&gt; database. This is because it is used on almost all mobile devices in the world. As SQLite is very similar to SQL everyone already knows the basic concepts like querying, inserting, updating, deleting data; databases and tables; joining tables etc.&#xA;But SQLite also has some advanced features and this article is about one of such called Trigger.&lt;/p&gt;&#xA;&lt;p&gt;If we try to speculate on the name “Trigger” we might say that probably something will be done when some changes are made to the database. And we’re pretty close to the truth.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decoding Handler and Looper in Android</title>
      <link>https://krossovochkin.com/posts/2019_12_24_decoding_handler_and_looper_in_android/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2019_12_24_decoding_handler_and_looper_in_android/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://proandroiddev.com/decoding-handler-and-looper-in-android-d4f3f2449513&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/original-proandroiddev-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Handler and Looper are one of the main low-level Android OS things, which almost nobody uses directly (at least nowadays). But they are at the core, so many other high-level solutions are based on them. Therefore one should know what Handler and Looper are, what and how they are doing.&lt;/p&gt;&#xA;&lt;p&gt;In this article we’ll try to understand Handler and Looper in Android. What, how and why we might need them.&#xA;We’ll start from some basic knowledge on classes and what they are doing, continue with relations between them. Then we’ll look at each class separately trying to dive deep into details. And will finish with some canonical examples on where they can be used.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SiMMMMpLLLLeDateFormat</title>
      <link>https://krossovochkin.com/posts/2019_07_21_simmmmplllledateformat/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2019_07_21_simmmmplllledateformat/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://proandroiddev.com/simmmmplllledateformat-6bd326d17012&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/original-proandroiddev-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Using SimpleDateFormat to format dates and times is a common thing (as Java 8 Time API is not that available on Android yet). Usually it looks like:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;formatter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;dd MMMM yyyy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Locale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGLISH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;formatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use different formats and locales with not only providing correct translations, but also some additional locale-specific formatting rules.&lt;/p&gt;&#xA;&lt;p&gt;One tricky thing about SimpleDateFormat formats is why we have M and L when they look identical?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android Version Code Tricks</title>
      <link>https://krossovochkin.com/posts/2019_07_04_android_version_code_tricks/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2019_07_04_android_version_code_tricks/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://proandroiddev.com/android-version-code-tricks-f63421285ee7&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/original-proandroiddev-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Version code is a special integer value which works as an internal version number. It is not visible to end users. Android system uses this number to protect against application downgrades — it is not possible to install new application with version code lower than in currently installed application.&#xA;Developers can use version code for example for doing specific tasks on updating to specific version.&lt;/p&gt;&#xA;&lt;p&gt;Version code is placed inside &lt;em&gt;AndroidManifest&lt;/em&gt;, but usually it is inside *defaultConfig *in &lt;em&gt;build.gradle&lt;/em&gt; (from where it is populated to *AndroidManifest *during assemble).&#xA;Also it is possible to access version code from generated BuildConfig.VERSION_CODE.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kotlin-android-synthetics performance analysis (with ButterKnife)</title>
      <link>https://krossovochkin.com/posts/2019_02_18_kotlin_android_synthetics_performance_analysis_with_butterknife/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2019_02_18_kotlin_android_synthetics_performance_analysis_with_butterknife/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://proandroiddev.com/kotlin-android-synthetics-performance-analysis-with-butterknife-90a54ca4325d&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/original-proandroiddev-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;After comment that &lt;a href=&#34;https://android-review.googlesource.com/c/platform/frameworks/support/+/882241&#34;&gt;synthetic is no longer recommended practice&lt;/a&gt; and &lt;a href=&#34;https://proandroiddev.com/the-argument-over-kotlin-synthetics-735305dd4ed0&#34;&gt;some arguments&lt;/a&gt; I decided to go deeper into issue with performance of &lt;em&gt;kotlin-android-synthetics&lt;/em&gt; by analyzing generated Java and byte code and comparing to other approaches (such as vanilla-*findViewById *and &lt;em&gt;ButterKnife&lt;/em&gt;).&lt;/p&gt;&#xA;&lt;h2 id=&#34;vanilla-findviewbyid&#34;&gt;Vanilla-findViewById&lt;/h2&gt;&#xA;&lt;p&gt;This is sample Activity we’ll work with throughout the article.&#xA;Approach with *findViewById *will be our baseline.&lt;/p&gt;&#xA;&lt;p&gt;Sample consists of:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;*Activity *class&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;One *TextView *property inside *Activity *with *lateinit *modifier&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dynamic mobile client development. Problem and concept.</title>
      <link>https://krossovochkin.com/posts/2018_07_21_dynamic_mobile_client_development_problem_and_concept/</link>
      <pubDate>Sat, 21 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2018_07_21_dynamic_mobile_client_development_problem_and_concept/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://medium.com/@krossovochkin/dynamic-mobile-client-development-problem-and-concept-df509891061&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/original-medium-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Data and interfaces — are two of the most important things in development.&lt;/p&gt;&#xA;&lt;p&gt;Data usually comes from/to server and tells application what should be used (and therefore shown to the user on UI)&lt;/p&gt;&#xA;&lt;p&gt;One of the main challenges in mobile development is to be in sync with server.&#xA;Server is updated immediately (often along with web). Publishing to Play Store takes some time (even not talking about AppStore and their app review).&#xA;Also users might try to use older versions of app with newer versions of web/server (not updating application when newer version was published).&#xA;Even more difficult to handle compatibility issues when there might be multiple servers with different versions on them, and application has to be flexible to work with all of them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Android] Notifications Overview and Pitfalls</title>
      <link>https://krossovochkin.com/posts/2017_02_11_android_notifications_overview_and_pitfalls/</link>
      <pubDate>Sat, 11 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://krossovochkin.com/posts/2017_02_11_android_notifications_overview_and_pitfalls/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://medium.com/@krossovochkin/android-notifications-overview-and-pitfalls-517d1118ec83&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/original-medium-green#badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;Notifications are widely used in Android applications. Though API is pretty straightforward, there are some key things that one should know and understand. This article will try to be first step into understanding Notifications API.&lt;/p&gt;&#xA;&lt;h2 id=&#34;sending-single-notification&#34;&gt;Sending Single Notification&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Notification&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singleNotification&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NotificationCompat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setContentTitle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setContentText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setSmallIcon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;drawable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ic_notification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NotificationManagerCompat&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notificationManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NotificationManagerCompat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notificationManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;notify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notificationId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singleNotification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../img/1_i_FZ2R1UInhmPkXVB1sC9Q.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Key things here:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;We use NotificationCompat.Builder to have single interface for creating notifications and let Support Library do all compatibility tricks;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
