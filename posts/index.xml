<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Krossovochkin</title>
    <link>https://krossovochkin.github.io/posts/</link>
    <description>Recent content in Posts on Krossovochkin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2020 Vasya Drobushkov</copyright>
    <lastBuildDate>Sun, 17 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://krossovochkin.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Real Kotlin Flow benefits over RxJava</title>
      <link>https://krossovochkin.github.io/posts/the_real_kotlin_flow_benefits_over_rxjava_c19b99ba6eb9/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/the_real_kotlin_flow_benefits_over_rxjava_c19b99ba6eb9/</guid>
      <description>Source
 
Introduction Recently the article about Kotlin Flow benefits over RxJava was published by Antoni Castejón García: Kotlin Flow benefits over RxJava
Though Antoni made a good work and many thanks to him for providing his feedback and experience (we need to share our thoughts, this improves community acknowledgment in various areas) — I found few places in the article with which I don’t fully or partially agree. Some points, in my opinion, were missing.</description>
    </item>
    
    <item>
      <title>Raising old project from the depth</title>
      <link>https://krossovochkin.github.io/posts/raising_old_project_from_the_depth_22f3084ed82e/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/raising_old_project_from_the_depth_22f3084ed82e/</guid>
      <description>Introduction I am an Android Developer from the beginning of my professional career. Straight from the University, I’ve jumped into Android development, and to this day continue my journey. During that time I’ve worked in different areas: enterprise, product business applications, SDK development. But all that started with mobile game development.
The first project I took part in was called “nICE”. It was a match-3-like game. It was at the time when there was Android Market and not Google Play Store, when we used Eclipse and not Android Studio and, of course, used Java.</description>
    </item>
    
    <item>
      <title>Kotlin useful but unfairly not mentioned features</title>
      <link>https://krossovochkin.github.io/posts/kotlin_useful_but_unfairly_not_mentioned_features_25ec41ea0a87/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/kotlin_useful_but_unfairly_not_mentioned_features_25ec41ea0a87/</guid>
      <description>Source
 
Introduction Many of us first learned Kotlin after Java. Learning process was fairly simple because Kotlin has many similarities when at the same time improves development experience by fighting common pain points Java developer (especially on Java 6, which is common in Android world) has to encounter every day.
There are a bunch of articles about cool Kotlin features like immutability, handling nullability, smart-cast, data classes, and so forth.</description>
    </item>
    
    <item>
      <title>Category theory</title>
      <link>https://krossovochkin.github.io/posts/category_theory_90b89ec9f2ab/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/category_theory_90b89ec9f2ab/</guid>
      <description>Source

Disclaimer This is short synopsis of great set of lectures. What is written here is by no means true, one should refer to original lectures or some books etc. This is written mostly for myself in case I wanted to revisit the topic in the future. Everything below is not “what it is” but mostly “how I understood that”. So, there might be mistakes and so on.
Category Category consists of:</description>
    </item>
    
    <item>
      <title>Accessibility of text over generic background color</title>
      <link>https://krossovochkin.github.io/posts/accessibility_of_text_over_generic_background_color_e82e9546731a/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/accessibility_of_text_over_generic_background_color_e82e9546731a/</guid>
      <description>Source
 
Introduction One of the important parts of application development is to make it accessible to as many users as possible. This includes people with impaired vision, color blindness, impaired hearing, impaired dexterity, cognitive disabilities, and many other disabilities. Making an app accessible is challenging but rewarding. The difficulty is because the development team should pay attention to some details which often might be overlooked. Though besides some advanced accessibility support might be too expensive to add, there are still some basic best practices to ensure that your app development is heading in the right direction (and can be improved later over time).</description>
    </item>
    
    <item>
      <title>Compiler-generated classes, methods and fields in Java</title>
      <link>https://krossovochkin.github.io/posts/compiler_generated_classes_methods_and_fields_in_java_343dde2cce61/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/compiler_generated_classes_methods_and_fields_in_java_343dde2cce61/</guid>
      <description>Source

Introduction When we write program in Java we create some classes, methods, fields and put all of this into our source code — .java files. After these files are compiled with javac (Java Compiler) into .class files we got a bunch of Java bytecode. It turns out that not only we create classes, methods and fields in our source code, but also compiler by itself can create them when needed.</description>
    </item>
    
    <item>
      <title>Unit Testing Best Practices</title>
      <link>https://krossovochkin.github.io/posts/unit_testing_best_practices_9bceeafe6edf/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/unit_testing_best_practices_9bceeafe6edf/</guid>
      <description>Source

Disclaimer: This is a set of things I consider very useful when writing unit tests. I call them best practices because they allow me to write good, quality tests that are easier to read, more maintainable, and better describe business needs.
These points might be subjective, you might have other opinions or have more items. That’s fine. Do not hesitate to put your opinions in the comments.
Tests in the Development Process Tests are very important in the development process.</description>
    </item>
    
    <item>
      <title>From RxJava to Kotlin Flow: Testing</title>
      <link>https://krossovochkin.github.io/posts/from_rxjava_to_kotlin_flow_testing_42f1641d8433/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/from_rxjava_to_kotlin_flow_testing_42f1641d8433/</guid>
      <description>Source
 This post is part of series of comparing RxJava to Kotlin Flow. Previous articles were about Threading, Backpressure, Error Handling, Stream Types, Throttling
 
Introduction Testing is a crucial part of whole development. Testing allows you to write programs in a reliable fashion, prevent regressions and have many other goodies. I won’t go through the list of advantages of writing tests in this article though. In testing it is important to have tools which allow you to write reliable tests and also tools which allow you to test your business logic.</description>
    </item>
    
    <item>
      <title>From RxJava to Kotlin Flow: Throttling</title>
      <link>https://krossovochkin.github.io/posts/from_rxjava_to_kotlin_flow_throttling_ed1778847619/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/from_rxjava_to_kotlin_flow_throttling_ed1778847619/</guid>
      <description>Source
 This post is part of series of comparing RxJava to Kotlin Flow. Previous articles were about Threading, Backpressure, Error Handling, Stream Types
  
It is advised to take a look at the overview of Throttling operators in RxJava before reading this article: Throttling in RxJava 2
Introduction Throttling is also one of the essential features of reactive programming. Streams might emit more values than we’re expecting to receive, so ability to limit number of events in a stream is very important.</description>
    </item>
    
    <item>
      <title>From RxJava to Kotlin Flow: Stream Types</title>
      <link>https://krossovochkin.github.io/posts/from_rxjava_to_kotlin_flow_stream_types_7916be6cabc2/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/from_rxjava_to_kotlin_flow_stream_types_7916be6cabc2/</guid>
      <description>Source
 This post is part of series of comparing RxJava to Kotlin Flow. Previous articles were about Threading, Backpressure, Error Handling
  
Introduction In reactive programming we use streams. Therefore in both RxJava and Kotlin Flow we’ll have to use some streams. Though we’ll encounter some differences if we decide to migrate. In this article we’ll try to get into the stream types which have RxJava and Kotlin Flow and some important differences.</description>
    </item>
    
    <item>
      <title>From RxJava to Kotlin Flow: Error Handling</title>
      <link>https://krossovochkin.github.io/posts/from_rxjava_to_kotlin_flow_error_handling_da1f6a4f2708/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/from_rxjava_to_kotlin_flow_error_handling_da1f6a4f2708/</guid>
      <description>Source
 This post is part of series of comparing RxJava to Kotlin Flow. Previous articles were about Threading and Backpressure.
 
Introduction Error handling is fundamental in reactive programming. Reactive streams might fail with exception and propagate it as an event downstream notifying consumers on the error that happened. As in previous articles, we’ll try to compare RxJava and Kotlin Flow error handling mechanisms. This might help us to migrate existing code from RxJava to Kotlin Flow and also understand how to properly use Kotlin Flow.</description>
    </item>
    
    <item>
      <title>Vinyls animation with MotionLayout</title>
      <link>https://krossovochkin.github.io/posts/vinyls_animation_with_motionlayout_595e716c2752/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/vinyls_animation_with_motionlayout_595e716c2752/</guid>
      <description>Source

Introduction Being professional Android developer for many years, things which were always difficult to me are animations, colors and dimensions — basically all the UI/UX stuff. I can’t describe or easily understand what good colors can be used, how to implement this or that animation and so on. Though we’re waiting for MotionLayout for quite long time (and Android Studio 4.0) I took some time to play with it.</description>
    </item>
    
    <item>
      <title>From RxJava to Kotlin Flow: Backpressure</title>
      <link>https://krossovochkin.github.io/posts/from_rxjava_to_kotlin_flow_backpressure_d1fb91e6dea8/</link>
      <pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/from_rxjava_to_kotlin_flow_backpressure_d1fb91e6dea8/</guid>
      <description>Disclaimer This article unfortunately is not that dive deep (because of complexity of internals of coroutines), but instead trying to compare RxJava and Kotlin Flow mostly as black box with trying to find out differences in behavior and how to migrate from RxJava with its backpressure solution to Kotlin Flow. Hopefully this article will give you direction on where to look at if you decide to migrate to Kotlin Flow.</description>
    </item>
    
    <item>
      <title>Diving deep into Android Dex bytecode</title>
      <link>https://krossovochkin.github.io/posts/diving_deep_into_android_dex_bytecode_48db82b170c8/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/diving_deep_into_android_dex_bytecode_48db82b170c8/</guid>
      <description>Source
 
Introduction Modern Android development is based on Kotlin, which is interoperable with Java. Whenever we use some cool feature from Kotlin (say High-order functions) under the hood (when running on JVM) the feature is implemented in terms of Java bytecode. This might lead to some overheads in memory and performance if used without caution (for example excessive usage of lambdas with parameters without inlining might produce a lot of anonymous classes and put additional pressure on GC).</description>
    </item>
    
    <item>
      <title>From RxJava 2 to Kotlin Flow: Threading</title>
      <link>https://krossovochkin.github.io/posts/from_rxjava_2_to_kotlin_flow_threading_8618867e1955/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/from_rxjava_2_to_kotlin_flow_threading_8618867e1955/</guid>
      <description>Source
  
Introduction For a long time RxJava was undisputed leader for reactive solutions on Android, though with Kotlin expansion and introducing cold streams (Flow) seems situation might be rapidly changing in the coming years. Though reactive programming is not related to threading in the first place, concurrency and parallelism are very important anyway. In this article we’ll try to make short recap on threading in RxJava 2 (with some basic caveats on its usage) and then take a look at how threading works in Kotlin Flow, so if anyone would like to migrate their code without affecting functionality it would be nice and smooth.</description>
    </item>
    
    <item>
      <title>Change Theme Dynamically with Circular Reveal Animation on Android</title>
      <link>https://krossovochkin.github.io/posts/change_theme_dynamically_with_circular_reveal_animation_on_android_8cd574f5f0d8/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/change_theme_dynamically_with_circular_reveal_animation_on_android_8cd574f5f0d8/</guid>
      <description>Introduction Dark theme on Android is on a hype at the moment. More and more apps add support for Dark theme over time allowing users to customize their phones, save battery and provide better accessibility. Though another trend which grows today is animated theme changes. First app I saw support of this was Telegram:
Source
After that in different modifications such feature started to appear in other apps, for example VK.</description>
    </item>
    
    <item>
      <title>SQLite Triggers (&#43; Android Room)</title>
      <link>https://krossovochkin.github.io/posts/sqlite_triggers_android_room_2e7120bb3e3a/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/sqlite_triggers_android_room_2e7120bb3e3a/</guid>
      <description>Introduction SQLite is one of the most used database. This is because it is used on almost all mobile devices in the world. As SQLite is very similar to SQL everyone already knows the basic concepts like querying, inserting, updating, deleting data; databases and tables; joining tables etc. But SQLite also has some advanced features and this article is about one of such called Trigger.
If we try to speculate on the name “Trigger” we might say that probably something will be done when some changes are made to the database.</description>
    </item>
    
    <item>
      <title>Decoding Handler and Looper in Android</title>
      <link>https://krossovochkin.github.io/posts/decoding_handler_and_looper_in_android_d4f3f2449513/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/decoding_handler_and_looper_in_android_d4f3f2449513/</guid>
      <description>Introduction Handler and Looper are one of the main low-level Android OS things, which almost nobody uses directly (at least nowadays). But they are at the core, so many other high-level solutions are based on them. Therefore one should know what Handler and Looper are, what and how they are doing.
In this article we’ll try to understand Handler and Looper in Android. What, how and why we might need them.</description>
    </item>
    
    <item>
      <title>Operator fusion in RxJava 2</title>
      <link>https://krossovochkin.github.io/posts/operator_fusion_in_rxjava_2_dcd6612cffae/</link>
      <pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/operator_fusion_in_rxjava_2_dcd6612cffae/</guid>
      <description>Source: https://github.com/ReactiveX
 
Introduction RxJava is a very powerful library, though it has some issues as well. Specifically performance and memory issues, which come from problems library tries to solve and how the solution is designed from technical perspective. In order to minimize overhead in RxJava there are a number of optimizations, which are called “operator fusion”. And we’ll talk about them in this article. But first let’s recap how RxJava reactive types work and what issues they have.</description>
    </item>
    
    <item>
      <title>Random interview coding task retrospective</title>
      <link>https://krossovochkin.github.io/posts/random_interview_coding_task_retrospective_befa1b399f0d/</link>
      <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/random_interview_coding_task_retrospective_befa1b399f0d/</guid>
      <description>Introduction It happens often that on interviews you’ve asked to perform some coding task. For unknown reason most of the times you’ve asked to write some code not in the IDE, but on piece of paper. I don’t like such tasks on an interview, because in real life one won’t write any kind of code on a paper. If you need to write something not in IDE you face issues like you can’t quickly change something or write new code in between the lines.</description>
    </item>
    
    <item>
      <title>SiMMMMpLLLLeDateFormat</title>
      <link>https://krossovochkin.github.io/posts/simmmmplllledateformat_6bd326d17012/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/simmmmplllledateformat_6bd326d17012/</guid>
      <description>Introduction Using SimpleDateFormat to format dates and times is a common thing (as Java 8 Time API is not that available on Android yet). Usually it looks like:
val formatter = SimpleDateFormat(&amp;#34;dd MMMM yyyy&amp;#34;, Locale.ENGLISH)formatter.format(date)We can use different formats and locales with not only providing correct translations, but also some additional locale-specific formatting rules.
One tricky thing about SimpleDateFormat formats is why we have M and L when they look identical?</description>
    </item>
    
    <item>
      <title>3x3x3 Rubik’s cube world (GIF alert)</title>
      <link>https://krossovochkin.github.io/posts/3x3x3_rubiks_cube_world_gif_alert_613d016d2ae7/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/3x3x3_rubiks_cube_world_gif_alert_613d016d2ae7/</guid>
      <description>Introduction I find Rubik’s cube an awesome puzzle. It has simple design, but quite difficult to solve (if you don’t know how to do that). At the same time it is possible to learn how to solve cube — there are a lot of algorithms for solving (for example Fridrich method describes quite a lot of them). These optimized algorithms made popular speedcubing — solving cube on time — with world record of less than 4 seconds.</description>
    </item>
    
    <item>
      <title>Android Version Code Tricks</title>
      <link>https://krossovochkin.github.io/posts/android_version_code_tricks_f63421285ee7/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/android_version_code_tricks_f63421285ee7/</guid>
      <description>Introduction Version code is a special integer value which works as an internal version number. It is not visible to end users. Android system uses this number to protect against application downgrades — it is not possible to install new application with version code lower than in currently installed application. Developers can use version code for example for doing specific tasks on updating to specific version.
Version code is placed inside AndroidManifest, but usually it is inside *defaultConfig *in build.</description>
    </item>
    
    <item>
      <title>Throttling in RxJava 2</title>
      <link>https://krossovochkin.github.io/posts/throttling_in_rxjava_2_d640ea5f7bf1/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/throttling_in_rxjava_2_d640ea5f7bf1/</guid>
      <description>Introduction I don’t know for what reason but I see from time to time same misunderstanding on different throttle operators in RxJava. Usually nobody says about throttle, instead by default everyone says that debounce can be used. Especially using debounce to avoid multiple clicks on buttons is commonly suggested, which I believe is a bad UX (some examples here and here). Let’s finally look at available options in RxJava and find out when it is better to use what.</description>
    </item>
    
    <item>
      <title>RxJava Observable to Single</title>
      <link>https://krossovochkin.github.io/posts/rxjava_observable_to_single_49c2a14da625/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/rxjava_observable_to_single_49c2a14da625/</guid>
      <description>Transforming Single to Observable is simple, as Single satisfies Observable’s contract. Just call single.toObservable() and you’re good. But transforming Observable to Single is not that simple: if it happens that Observable emits exactly one value and completes (or terminates with error without emitting values) then it is pretty straightforward, otherwise one need to set up some additional rules.
In RxJava there are a number of operators for transforming Observable to Single:</description>
    </item>
    
    <item>
      <title>Dart language bad design choices</title>
      <link>https://krossovochkin.github.io/posts/dart_language_bad_design_choices_6e35987dc693/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/dart_language_bad_design_choices_6e35987dc693/</guid>
      <description>Introduction Before raising a point about some design choices we need to define some criteria.
  Intent/Declaration &amp;gt; Usage/Implementation Code one write should clearly state the intent. Implementation is not that important than an intent.
  Implicit is bad Implicit things do not share the intention, therefore from the first point it means that any implicit thing hides true intent. If anything hides intention — it can be considered bad.</description>
    </item>
    
    <item>
      <title>Kotlin-android-synthetics performance analysis (with ButterKnife)</title>
      <link>https://krossovochkin.github.io/posts/kotlin_android_synthetics_performance_analysis_with_butterknife_90a54ca4325d/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/kotlin_android_synthetics_performance_analysis_with_butterknife_90a54ca4325d/</guid>
      <description>Introduction After comment that synthetic is no longer recommended practice and some arguments I decided to go deeper into issue with performance of kotlin-android-synthetics by analyzing generated Java and byte code and comparing to other approaches (such as vanilla-*findViewById *and ButterKnife).
Vanilla-findViewById This is sample Activity we’ll work with throughout the article. Approach with *findViewById *will be our baseline.
Sample consists of:
  *Activity *class
  One *TextView *property inside *Activity *with *lateinit *modifier</description>
    </item>
    
    <item>
      <title>Kotlin-Java interop: function references and SAM conversions</title>
      <link>https://krossovochkin.github.io/posts/kotlin_java_interop_function_references_and_sam_conversions_3d0cd36f7967/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/kotlin_java_interop_function_references_and_sam_conversions_3d0cd36f7967/</guid>
      <description>Though all the things below are pretty obvious if being careful while dealing with Kotlin-Java interop, I decided still to write short note about one particular issue with function references (from Kotlin side) and SAM conversions (from Java side).
Function reference Function reference is a good way to pass function as a parameter without explicitly using lambdas.
For example, if we have function:
fun method(callback: (Input) -&amp;gt; Output) { .</description>
    </item>
    
    <item>
      <title>Dynamic mobile client development. Problem and concept.</title>
      <link>https://krossovochkin.github.io/posts/dynamic_mobile_client_development_problem_and_concept_df509891061/</link>
      <pubDate>Sat, 21 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/dynamic_mobile_client_development_problem_and_concept_df509891061/</guid>
      <description>Data and interfaces — are two of the most important things in development.
Data usually comes from/to server and tells application what should be used (and therefore shown to the user on UI)
One of the main challenges in mobile development is to be in sync with server. Server is updated immediately (often along with web). Publishing to Play Store takes some time (even not talking about AppStore and their app review).</description>
    </item>
    
    <item>
      <title>Neural Networks and Deep Learning</title>
      <link>https://krossovochkin.github.io/posts/neural_networks_and_deep_learning_38aaca43ae0f/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/neural_networks_and_deep_learning_38aaca43ae0f/</guid>
      <description>Disclaimer It is brief synopsis of Neural Networks and Deep learning course on Coursera. That course is a first part of Deep learning specialization. Though course is great and very useful, I found that it has a lot of mathematics explanation (linear algebra — matrices, derivatives etc.), so sometimes it was difficult to wait for the actual useful information I didn’t know. So, I think I might be interested in reviewing neural networks in the future, but won’t be able to review course information as there will be a lot of such noise.</description>
    </item>
    
    <item>
      <title>[Android] Notifications Overview and Pitfalls</title>
      <link>https://krossovochkin.github.io/posts/android_notifications_overview_and_pitfalls_517d1118ec83/</link>
      <pubDate>Sat, 11 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://krossovochkin.github.io/posts/android_notifications_overview_and_pitfalls_517d1118ec83/</guid>
      <description>Introduction Notifications are widely used in Android applications. Though API is pretty straightforward, there are some key things that one should know and understand. This article will try to be first step into understanding Notifications API.
Sending Single Notification Notification singleNotification = new NotificationCompat.Builder(this).setContentTitle(&amp;#34;Title&amp;#34;).setContentText(&amp;#34;Text&amp;#34;).setSmallIcon(R.drawable.ic_notification).build();NotificationManagerCompat notificationManager = NotificationManagerCompat.*from*(context);notificationManager.notify(notificationId, singleNotification);Key things here:
  We use NotificationCompat.Builder to have single interface for creating notifications and let Support Library do all compatibility tricks;</description>
    </item>
    
  </channel>
</rss>